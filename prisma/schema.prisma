// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  isVerified  Boolean @default(false)
  createdAt   DateTime @default(now())
  tokens      VerificationToken[]
  resetTokens PasswordResetToken[]
  restaurants Restaurant[]
  reservations Reservation[]
  claimedDeals ClaimedDeal[]
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  cuisine     String
  description String?
  location    String
  latitude    Float?
  longitude   Float?
  phone       String?
  hours       String?
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  image       String?
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  offers      Offer[]
  reservations Reservation[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId])
  @@index([cuisine])
  @@index([latitude, longitude])
}

model Offer {
  id               Int        @id @default(autoincrement())
  title            String
  description      String?
  originalPrice    Float
  discountedPrice  Float
  discount         Int
  terms            String?
  expiresAt        DateTime
  isActive         Boolean    @default(true)
  restaurantId     Int
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  claimedDeals     ClaimedDeal[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@index([restaurantId])
  @@index([expiresAt])
  @@index([isActive])
}

model Reservation {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  date         DateTime
  time         String
  partySize    Int
  specialRequests String?
  status       ReservationStatus @default(PENDING)
  phoneNumber  String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([restaurantId])
  @@index([date])
  @@index([status])
}

model ClaimedDeal {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  offerId      Int
  offer        Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
  claimedAt    DateTime @default(now())
  redeemedAt   DateTime?
  status       ClaimStatus @default(CLAIMED)
  redemptionCode String @unique
  notes        String?

  @@index([userId])
  @@index([offerId])
  @@index([redemptionCode])
  @@index([status])
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ClaimStatus {
  CLAIMED
  REDEEMED
  EXPIRED
}
